// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsParamImpl();
void InitDefaultsParam();
void InitDefaultsCommandImpl();
void InitDefaultsCommand();
void InitDefaultsEncodedMessageImpl();
void InitDefaultsEncodedMessage();
void InitDefaultsFileImpl();
void InitDefaultsFile();
void InitDefaultsServerResponseImpl();
void InitDefaultsServerResponse();
inline void InitDefaults() {
  InitDefaultsParam();
  InitDefaultsCommand();
  InitDefaultsEncodedMessage();
  InitDefaultsFile();
  InitDefaultsServerResponse();
}
}  // namespace protobuf_messages_2eproto
namespace StorageCloud {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class EncodedMessage;
class EncodedMessageDefaultTypeInternal;
extern EncodedMessageDefaultTypeInternal _EncodedMessage_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Param;
class ParamDefaultTypeInternal;
extern ParamDefaultTypeInternal _Param_default_instance_;
class ServerResponse;
class ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace StorageCloud
namespace StorageCloud {

enum Command_CommandType {
  Command_CommandType_NULL_ = 0,
  Command_CommandType_LOGIN = 1,
  Command_CommandType_RELOGIN = 2,
  Command_CommandType_LOGOUT = 3,
  Command_CommandType_REGISTER = 4,
  Command_CommandType_STAT = 5,
  Command_CommandType_LIST_FILES = 6,
  Command_CommandType_Command_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Command_CommandType_Command_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Command_CommandType_IsValid(int value);
const Command_CommandType Command_CommandType_CommandType_MIN = Command_CommandType_NULL_;
const Command_CommandType Command_CommandType_CommandType_MAX = Command_CommandType_LIST_FILES;
const int Command_CommandType_CommandType_ARRAYSIZE = Command_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_CommandType_descriptor();
inline const ::std::string& Command_CommandType_Name(Command_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_CommandType_descriptor(), value);
}
inline bool Command_CommandType_Parse(
    const ::std::string& name, Command_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_CommandType>(
    Command_CommandType_descriptor(), name, value);
}
enum ServerResponse_ResponseType {
  ServerResponse_ResponseType_NULL_ = 0,
  ServerResponse_ResponseType_OK = 1,
  ServerResponse_ResponseType_ERROR = 2,
  ServerResponse_ResponseType_LOGGED = 3,
  ServerResponse_ResponseType_STAT = 4,
  ServerResponse_ResponseType_FILES = 5,
  ServerResponse_ResponseType_SHARED = 6,
  ServerResponse_ResponseType_DATA = 7,
  ServerResponse_ResponseType_CAN_SEND = 8,
  ServerResponse_ResponseType_ServerResponse_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerResponse_ResponseType_ServerResponse_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerResponse_ResponseType_IsValid(int value);
const ServerResponse_ResponseType ServerResponse_ResponseType_ResponseType_MIN = ServerResponse_ResponseType_NULL_;
const ServerResponse_ResponseType ServerResponse_ResponseType_ResponseType_MAX = ServerResponse_ResponseType_CAN_SEND;
const int ServerResponse_ResponseType_ResponseType_ARRAYSIZE = ServerResponse_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerResponse_ResponseType_descriptor();
inline const ::std::string& ServerResponse_ResponseType_Name(ServerResponse_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerResponse_ResponseType_descriptor(), value);
}
inline bool ServerResponse_ResponseType_Parse(
    const ::std::string& name, ServerResponse_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerResponse_ResponseType>(
    ServerResponse_ResponseType_descriptor(), name, value);
}
// ===================================================================

class Param : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.Param) */ {
 public:
  Param();
  virtual ~Param();

  Param(const Param& from);

  inline Param& operator=(const Param& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Param(Param&& from) noexcept
    : Param() {
    *this = ::std::move(from);
  }

  inline Param& operator=(Param&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Param& default_instance();

  enum ValueCase {
    kSParamVal = 2,
    kIParamVal = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Param* internal_default_instance() {
    return reinterpret_cast<const Param*>(
               &_Param_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Param* other);
  friend void swap(Param& a, Param& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Param* New() const PROTOBUF_FINAL { return New(NULL); }

  Param* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Param& from);
  void MergeFrom(const Param& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Param* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string paramId = 1;
  void clear_paramid();
  static const int kParamIdFieldNumber = 1;
  const ::std::string& paramid() const;
  void set_paramid(const ::std::string& value);
  #if LANG_CXX11
  void set_paramid(::std::string&& value);
  #endif
  void set_paramid(const char* value);
  void set_paramid(const char* value, size_t size);
  ::std::string* mutable_paramid();
  ::std::string* release_paramid();
  void set_allocated_paramid(::std::string* paramid);

  // string SParamVal = 2;
  private:
  bool has_sparamval() const;
  public:
  void clear_sparamval();
  static const int kSParamValFieldNumber = 2;
  const ::std::string& sparamval() const;
  void set_sparamval(const ::std::string& value);
  #if LANG_CXX11
  void set_sparamval(::std::string&& value);
  #endif
  void set_sparamval(const char* value);
  void set_sparamval(const char* value, size_t size);
  ::std::string* mutable_sparamval();
  ::std::string* release_sparamval();
  void set_allocated_sparamval(::std::string* sparamval);

  // int64 IParamVal = 3;
  private:
  bool has_iparamval() const;
  public:
  void clear_iparamval();
  static const int kIParamValFieldNumber = 3;
  ::google::protobuf::int64 iparamval() const;
  void set_iparamval(::google::protobuf::int64 value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:StorageCloud.Param)
 private:
  void set_has_sparamval();
  void set_has_iparamval();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr paramid_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr sparamval_;
    ::google::protobuf::int64 iparamval_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsParamImpl();
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Command_CommandType CommandType;
  static const CommandType NULL_ =
    Command_CommandType_NULL_;
  static const CommandType LOGIN =
    Command_CommandType_LOGIN;
  static const CommandType RELOGIN =
    Command_CommandType_RELOGIN;
  static const CommandType LOGOUT =
    Command_CommandType_LOGOUT;
  static const CommandType REGISTER =
    Command_CommandType_REGISTER;
  static const CommandType STAT =
    Command_CommandType_STAT;
  static const CommandType LIST_FILES =
    Command_CommandType_LIST_FILES;
  static inline bool CommandType_IsValid(int value) {
    return Command_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    Command_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    Command_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    Command_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return Command_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return Command_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return Command_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .StorageCloud.Param params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::StorageCloud::Param& params(int index) const;
  ::StorageCloud::Param* mutable_params(int index);
  ::StorageCloud::Param* add_params();
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
      params() const;

  // repeated string list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::std::string& list(int index) const;
  ::std::string* mutable_list(int index);
  void set_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_list(int index, ::std::string&& value);
  #endif
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  ::std::string* add_list();
  void add_list(const ::std::string& value);
  #if LANG_CXX11
  void add_list(::std::string&& value);
  #endif
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .StorageCloud.Command.CommandType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::StorageCloud::Command_CommandType type() const;
  void set_type(::StorageCloud::Command_CommandType value);

  // @@protoc_insertion_point(class_scope:StorageCloud.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param > params_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsCommandImpl();
};
// -------------------------------------------------------------------

class EncodedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.EncodedMessage) */ {
 public:
  EncodedMessage();
  virtual ~EncodedMessage();

  EncodedMessage(const EncodedMessage& from);

  inline EncodedMessage& operator=(const EncodedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncodedMessage(EncodedMessage&& from) noexcept
    : EncodedMessage() {
    *this = ::std::move(from);
  }

  inline EncodedMessage& operator=(EncodedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncodedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncodedMessage* internal_default_instance() {
    return reinterpret_cast<const EncodedMessage*>(
               &_EncodedMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EncodedMessage* other);
  friend void swap(EncodedMessage& a, EncodedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncodedMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  EncodedMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EncodedMessage& from);
  void MergeFrom(const EncodedMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EncodedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 dataSize = 1;
  void clear_datasize();
  static const int kDataSizeFieldNumber = 1;
  ::google::protobuf::int64 datasize() const;
  void set_datasize(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:StorageCloud.EncodedMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 datasize_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsEncodedMessageImpl();
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(File* other);
  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline File* New() const PROTOBUF_FINAL { return New(NULL); }

  File* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .StorageCloud.Param metadata = 3;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::StorageCloud::Param& metadata(int index) const;
  ::StorageCloud::Param* mutable_metadata(int index);
  ::StorageCloud::Param* add_metadata();
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
      mutable_metadata();
  const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
      metadata() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:StorageCloud.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param > metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 size_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsFileImpl();
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.ServerResponse) */ {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ServerResponse* other);
  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServerResponse_ResponseType ResponseType;
  static const ResponseType NULL_ =
    ServerResponse_ResponseType_NULL_;
  static const ResponseType OK =
    ServerResponse_ResponseType_OK;
  static const ResponseType ERROR =
    ServerResponse_ResponseType_ERROR;
  static const ResponseType LOGGED =
    ServerResponse_ResponseType_LOGGED;
  static const ResponseType STAT =
    ServerResponse_ResponseType_STAT;
  static const ResponseType FILES =
    ServerResponse_ResponseType_FILES;
  static const ResponseType SHARED =
    ServerResponse_ResponseType_SHARED;
  static const ResponseType DATA =
    ServerResponse_ResponseType_DATA;
  static const ResponseType CAN_SEND =
    ServerResponse_ResponseType_CAN_SEND;
  static inline bool ResponseType_IsValid(int value) {
    return ServerResponse_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    ServerResponse_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    ServerResponse_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    ServerResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return ServerResponse_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return ServerResponse_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return ServerResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .StorageCloud.Param params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::StorageCloud::Param& params(int index) const;
  ::StorageCloud::Param* mutable_params(int index);
  ::StorageCloud::Param* add_params();
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
      params() const;

  // repeated string list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::std::string& list(int index) const;
  ::std::string* mutable_list(int index);
  void set_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_list(int index, ::std::string&& value);
  #endif
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  ::std::string* add_list();
  void add_list(const ::std::string& value);
  #if LANG_CXX11
  void add_list(::std::string&& value);
  #endif
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // repeated .StorageCloud.File fileList = 4;
  int filelist_size() const;
  void clear_filelist();
  static const int kFileListFieldNumber = 4;
  const ::StorageCloud::File& filelist(int index) const;
  ::StorageCloud::File* mutable_filelist(int index);
  ::StorageCloud::File* add_filelist();
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::File >*
      mutable_filelist();
  const ::google::protobuf::RepeatedPtrField< ::StorageCloud::File >&
      filelist() const;

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .StorageCloud.ServerResponse.ResponseType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::StorageCloud::ServerResponse_ResponseType type() const;
  void set_type(::StorageCloud::ServerResponse_ResponseType value);

  // @@protoc_insertion_point(class_scope:StorageCloud.ServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param > params_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_;
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::File > filelist_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsServerResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Param

// string paramId = 1;
inline void Param::clear_paramid() {
  paramid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Param::paramid() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Param.paramId)
  return paramid_.GetNoArena();
}
inline void Param::set_paramid(const ::std::string& value) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.Param.paramId)
}
#if LANG_CXX11
inline void Param::set_paramid(::std::string&& value) {
  
  paramid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.Param.paramId)
}
#endif
inline void Param::set_paramid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.Param.paramId)
}
inline void Param::set_paramid(const char* value, size_t size) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.Param.paramId)
}
inline ::std::string* Param::mutable_paramid() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.Param.paramId)
  return paramid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Param::release_paramid() {
  // @@protoc_insertion_point(field_release:StorageCloud.Param.paramId)
  
  return paramid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Param::set_allocated_paramid(::std::string* paramid) {
  if (paramid != NULL) {
    
  } else {
    
  }
  paramid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paramid);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.Param.paramId)
}

// string SParamVal = 2;
inline bool Param::has_sparamval() const {
  return value_case() == kSParamVal;
}
inline void Param::set_has_sparamval() {
  _oneof_case_[0] = kSParamVal;
}
inline void Param::clear_sparamval() {
  if (has_sparamval()) {
    value_.sparamval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Param::sparamval() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Param.SParamVal)
  if (has_sparamval()) {
    return value_.sparamval_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Param::set_sparamval(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Param.SParamVal)
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sparamval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.Param.SParamVal)
}
#if LANG_CXX11
inline void Param::set_sparamval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Param.SParamVal)
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sparamval_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.Param.SParamVal)
}
#endif
inline void Param::set_sparamval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sparamval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.Param.SParamVal)
}
inline void Param::set_sparamval(const char* value, size_t size) {
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sparamval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.Param.SParamVal)
}
inline ::std::string* Param::mutable_sparamval() {
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:StorageCloud.Param.SParamVal)
  return value_.sparamval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Param::release_sparamval() {
  // @@protoc_insertion_point(field_release:StorageCloud.Param.SParamVal)
  if (has_sparamval()) {
    clear_has_value();
    return value_.sparamval_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Param::set_allocated_sparamval(::std::string* sparamval) {
  if (!has_sparamval()) {
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (sparamval != NULL) {
    set_has_sparamval();
    value_.sparamval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        sparamval);
  }
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.Param.SParamVal)
}

// int64 IParamVal = 3;
inline bool Param::has_iparamval() const {
  return value_case() == kIParamVal;
}
inline void Param::set_has_iparamval() {
  _oneof_case_[0] = kIParamVal;
}
inline void Param::clear_iparamval() {
  if (has_iparamval()) {
    value_.iparamval_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 Param::iparamval() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Param.IParamVal)
  if (has_iparamval()) {
    return value_.iparamval_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Param::set_iparamval(::google::protobuf::int64 value) {
  if (!has_iparamval()) {
    clear_value();
    set_has_iparamval();
  }
  value_.iparamval_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.Param.IParamVal)
}

inline bool Param::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Param::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Param::ValueCase Param::value_case() const {
  return Param::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Command

// .StorageCloud.Command.CommandType type = 1;
inline void Command::clear_type() {
  type_ = 0;
}
inline ::StorageCloud::Command_CommandType Command::type() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Command.type)
  return static_cast< ::StorageCloud::Command_CommandType >(type_);
}
inline void Command::set_type(::StorageCloud::Command_CommandType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.Command.type)
}

// repeated .StorageCloud.Param params = 2;
inline int Command::params_size() const {
  return params_.size();
}
inline void Command::clear_params() {
  params_.Clear();
}
inline const ::StorageCloud::Param& Command::params(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.Command.params)
  return params_.Get(index);
}
inline ::StorageCloud::Param* Command::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.Command.params)
  return params_.Mutable(index);
}
inline ::StorageCloud::Param* Command::add_params() {
  // @@protoc_insertion_point(field_add:StorageCloud.Command.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
Command::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.Command.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
Command::params() const {
  // @@protoc_insertion_point(field_list:StorageCloud.Command.params)
  return params_;
}

// repeated string list = 3;
inline int Command::list_size() const {
  return list_.size();
}
inline void Command::clear_list() {
  list_.Clear();
}
inline const ::std::string& Command::list(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.Command.list)
  return list_.Get(index);
}
inline ::std::string* Command::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.Command.list)
  return list_.Mutable(index);
}
inline void Command::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Command.list)
  list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Command::set_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Command.list)
  list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Command::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageCloud.Command.list)
}
inline void Command::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.Command.list)
}
inline ::std::string* Command::add_list() {
  // @@protoc_insertion_point(field_add_mutable:StorageCloud.Command.list)
  return list_.Add();
}
inline void Command::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageCloud.Command.list)
}
#if LANG_CXX11
inline void Command::add_list(::std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageCloud.Command.list)
}
#endif
inline void Command::add_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageCloud.Command.list)
}
inline void Command::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageCloud.Command.list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Command::list() const {
  // @@protoc_insertion_point(field_list:StorageCloud.Command.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.Command.list)
  return &list_;
}

// bytes data = 4;
inline void Command::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::data() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Command.data)
  return data_.GetNoArena();
}
inline void Command::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.Command.data)
}
#if LANG_CXX11
inline void Command::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.Command.data)
}
#endif
inline void Command::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.Command.data)
}
inline void Command::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.Command.data)
}
inline ::std::string* Command::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.Command.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_data() {
  // @@protoc_insertion_point(field_release:StorageCloud.Command.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.Command.data)
}

// -------------------------------------------------------------------

// EncodedMessage

// int64 dataSize = 1;
inline void EncodedMessage::clear_datasize() {
  datasize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EncodedMessage::datasize() const {
  // @@protoc_insertion_point(field_get:StorageCloud.EncodedMessage.dataSize)
  return datasize_;
}
inline void EncodedMessage::set_datasize(::google::protobuf::int64 value) {
  
  datasize_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.EncodedMessage.dataSize)
}

// bytes hash = 2;
inline void EncodedMessage::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncodedMessage::hash() const {
  // @@protoc_insertion_point(field_get:StorageCloud.EncodedMessage.hash)
  return hash_.GetNoArena();
}
inline void EncodedMessage::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.EncodedMessage.hash)
}
#if LANG_CXX11
inline void EncodedMessage::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.EncodedMessage.hash)
}
#endif
inline void EncodedMessage::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.EncodedMessage.hash)
}
inline void EncodedMessage::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.EncodedMessage.hash)
}
inline ::std::string* EncodedMessage::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.EncodedMessage.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncodedMessage::release_hash() {
  // @@protoc_insertion_point(field_release:StorageCloud.EncodedMessage.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncodedMessage::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.EncodedMessage.hash)
}

// bytes data = 3;
inline void EncodedMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncodedMessage::data() const {
  // @@protoc_insertion_point(field_get:StorageCloud.EncodedMessage.data)
  return data_.GetNoArena();
}
inline void EncodedMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.EncodedMessage.data)
}
#if LANG_CXX11
inline void EncodedMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.EncodedMessage.data)
}
#endif
inline void EncodedMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.EncodedMessage.data)
}
inline void EncodedMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.EncodedMessage.data)
}
inline ::std::string* EncodedMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.EncodedMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncodedMessage::release_data() {
  // @@protoc_insertion_point(field_release:StorageCloud.EncodedMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncodedMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.EncodedMessage.data)
}

// -------------------------------------------------------------------

// File

// string name = 1;
inline void File::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::name() const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.name)
  return name_.GetNoArena();
}
inline void File::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.File.name)
}
#if LANG_CXX11
inline void File::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.File.name)
}
#endif
inline void File::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.File.name)
}
inline void File::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.File.name)
}
inline ::std::string* File::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.File.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:StorageCloud.File.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.File.name)
}

// int64 size = 2;
inline void File::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 File::size() const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.size)
  return size_;
}
inline void File::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.File.size)
}

// repeated .StorageCloud.Param metadata = 3;
inline int File::metadata_size() const {
  return metadata_.size();
}
inline void File::clear_metadata() {
  metadata_.Clear();
}
inline const ::StorageCloud::Param& File::metadata(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.metadata)
  return metadata_.Get(index);
}
inline ::StorageCloud::Param* File::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.File.metadata)
  return metadata_.Mutable(index);
}
inline ::StorageCloud::Param* File::add_metadata() {
  // @@protoc_insertion_point(field_add:StorageCloud.File.metadata)
  return metadata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
File::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.File.metadata)
  return &metadata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
File::metadata() const {
  // @@protoc_insertion_point(field_list:StorageCloud.File.metadata)
  return metadata_;
}

// -------------------------------------------------------------------

// ServerResponse

// .StorageCloud.ServerResponse.ResponseType type = 1;
inline void ServerResponse::clear_type() {
  type_ = 0;
}
inline ::StorageCloud::ServerResponse_ResponseType ServerResponse::type() const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.type)
  return static_cast< ::StorageCloud::ServerResponse_ResponseType >(type_);
}
inline void ServerResponse::set_type(::StorageCloud::ServerResponse_ResponseType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.ServerResponse.type)
}

// repeated .StorageCloud.Param params = 2;
inline int ServerResponse::params_size() const {
  return params_.size();
}
inline void ServerResponse::clear_params() {
  params_.Clear();
}
inline const ::StorageCloud::Param& ServerResponse::params(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.params)
  return params_.Get(index);
}
inline ::StorageCloud::Param* ServerResponse::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.ServerResponse.params)
  return params_.Mutable(index);
}
inline ::StorageCloud::Param* ServerResponse::add_params() {
  // @@protoc_insertion_point(field_add:StorageCloud.ServerResponse.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
ServerResponse::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.ServerResponse.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
ServerResponse::params() const {
  // @@protoc_insertion_point(field_list:StorageCloud.ServerResponse.params)
  return params_;
}

// repeated string list = 3;
inline int ServerResponse::list_size() const {
  return list_.size();
}
inline void ServerResponse::clear_list() {
  list_.Clear();
}
inline const ::std::string& ServerResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.list)
  return list_.Get(index);
}
inline ::std::string* ServerResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.ServerResponse.list)
  return list_.Mutable(index);
}
inline void ServerResponse::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.ServerResponse.list)
  list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerResponse::set_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.ServerResponse.list)
  list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerResponse::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageCloud.ServerResponse.list)
}
inline void ServerResponse::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.ServerResponse.list)
}
inline ::std::string* ServerResponse::add_list() {
  // @@protoc_insertion_point(field_add_mutable:StorageCloud.ServerResponse.list)
  return list_.Add();
}
inline void ServerResponse::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageCloud.ServerResponse.list)
}
#if LANG_CXX11
inline void ServerResponse::add_list(::std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageCloud.ServerResponse.list)
}
#endif
inline void ServerResponse::add_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageCloud.ServerResponse.list)
}
inline void ServerResponse::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageCloud.ServerResponse.list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerResponse::list() const {
  // @@protoc_insertion_point(field_list:StorageCloud.ServerResponse.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.ServerResponse.list)
  return &list_;
}

// repeated .StorageCloud.File fileList = 4;
inline int ServerResponse::filelist_size() const {
  return filelist_.size();
}
inline void ServerResponse::clear_filelist() {
  filelist_.Clear();
}
inline const ::StorageCloud::File& ServerResponse::filelist(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.fileList)
  return filelist_.Get(index);
}
inline ::StorageCloud::File* ServerResponse::mutable_filelist(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.ServerResponse.fileList)
  return filelist_.Mutable(index);
}
inline ::StorageCloud::File* ServerResponse::add_filelist() {
  // @@protoc_insertion_point(field_add:StorageCloud.ServerResponse.fileList)
  return filelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::StorageCloud::File >*
ServerResponse::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.ServerResponse.fileList)
  return &filelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::StorageCloud::File >&
ServerResponse::filelist() const {
  // @@protoc_insertion_point(field_list:StorageCloud.ServerResponse.fileList)
  return filelist_;
}

// bytes data = 5;
inline void ServerResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerResponse::data() const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.data)
  return data_.GetNoArena();
}
inline void ServerResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.ServerResponse.data)
}
#if LANG_CXX11
inline void ServerResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.ServerResponse.data)
}
#endif
inline void ServerResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.ServerResponse.data)
}
inline void ServerResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.ServerResponse.data)
}
inline ::std::string* ServerResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.ServerResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerResponse::release_data() {
  // @@protoc_insertion_point(field_release:StorageCloud.ServerResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.ServerResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StorageCloud

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::StorageCloud::Command_CommandType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageCloud::Command_CommandType>() {
  return ::StorageCloud::Command_CommandType_descriptor();
}
template <> struct is_proto_enum< ::StorageCloud::ServerResponse_ResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageCloud::ServerResponse_ResponseType>() {
  return ::StorageCloud::ServerResponse_ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
