// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsParamImpl();
void InitDefaultsParam();
void InitDefaultsCommandImpl();
void InitDefaultsCommand();
void InitDefaultsEncodedMessageImpl();
void InitDefaultsEncodedMessage();
void InitDefaultsHandshakeImpl();
void InitDefaultsHandshake();
void InitDefaultsFileImpl();
void InitDefaultsFile();
void InitDefaultsServerResponseImpl();
void InitDefaultsServerResponse();
inline void InitDefaults() {
  InitDefaultsParam();
  InitDefaultsCommand();
  InitDefaultsEncodedMessage();
  InitDefaultsHandshake();
  InitDefaultsFile();
  InitDefaultsServerResponse();
}
}  // namespace protobuf_messages_2eproto
namespace StorageCloud {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class EncodedMessage;
class EncodedMessageDefaultTypeInternal;
extern EncodedMessageDefaultTypeInternal _EncodedMessage_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Handshake;
class HandshakeDefaultTypeInternal;
extern HandshakeDefaultTypeInternal _Handshake_default_instance_;
class Param;
class ParamDefaultTypeInternal;
extern ParamDefaultTypeInternal _Param_default_instance_;
class ServerResponse;
class ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace StorageCloud
namespace StorageCloud {

enum CommandType {
  NULL1 = 0,
  LOGIN = 1,
  RELOGIN = 2,
  LOGOUT = 3,
  REGISTER = 4,
  GET_STAT = 5,
  LIST_FILES = 6,
  MKDIR = 7,
  DELETE = 8,
  RENAME = 9,
  SHARE = 10,
  SHARE_INFO = 11,
  MOVE = 12,
  DOWNLOAD = 13,
  METADATA = 14,
  USR_DATA = 15,
  UNSHARE = 16,
  DELETE_USER = 17,
  CHANGE_USER_PASS = 18,
  USER_STAT = 19,
  LIST_USER_FILES = 20,
  DELETE_USER_FILE = 21,
  ADMIN_UNSHARE = 22,
  ADMIN_SHARE_INFO = 23,
  WARN = 24,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = NULL1;
const CommandType CommandType_MAX = WARN;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
enum HashAlgorithm {
  NULL2 = 0,
  H_NOHASH = 1,
  H_SHA256 = 2,
  H_SHA512 = 3,
  H_SHA1 = 4,
  H_MD5 = 5,
  HashAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HashAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HashAlgorithm_IsValid(int value);
const HashAlgorithm HashAlgorithm_MIN = NULL2;
const HashAlgorithm HashAlgorithm_MAX = H_MD5;
const int HashAlgorithm_ARRAYSIZE = HashAlgorithm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HashAlgorithm_descriptor();
inline const ::std::string& HashAlgorithm_Name(HashAlgorithm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HashAlgorithm_descriptor(), value);
}
inline bool HashAlgorithm_Parse(
    const ::std::string& name, HashAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HashAlgorithm>(
    HashAlgorithm_descriptor(), name, value);
}
enum MessageType {
  NULL3 = 0,
  COMMAND = 1,
  SERVER_RESPONSE = 2,
  HANDSHAKE = 3,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = NULL3;
const MessageType MessageType_MAX = HANDSHAKE;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum EncryptionAlgorithm {
  NULL4 = 0,
  NOENCRYPTION = 1,
  CAESAR = 2,
  EncryptionAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EncryptionAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EncryptionAlgorithm_IsValid(int value);
const EncryptionAlgorithm EncryptionAlgorithm_MIN = NULL4;
const EncryptionAlgorithm EncryptionAlgorithm_MAX = CAESAR;
const int EncryptionAlgorithm_ARRAYSIZE = EncryptionAlgorithm_MAX + 1;

const ::google::protobuf::EnumDescriptor* EncryptionAlgorithm_descriptor();
inline const ::std::string& EncryptionAlgorithm_Name(EncryptionAlgorithm value) {
  return ::google::protobuf::internal::NameOfEnum(
    EncryptionAlgorithm_descriptor(), value);
}
inline bool EncryptionAlgorithm_Parse(
    const ::std::string& name, EncryptionAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EncryptionAlgorithm>(
    EncryptionAlgorithm_descriptor(), name, value);
}
enum FileType {
  NULL6 = 0,
  FILE = 1,
  DIRECTORY = 2,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FileType_IsValid(int value);
const FileType FileType_MIN = NULL6;
const FileType FileType_MAX = DIRECTORY;
const int FileType_ARRAYSIZE = FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileType_descriptor();
inline const ::std::string& FileType_Name(FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileType_descriptor(), value);
}
inline bool FileType_Parse(
    const ::std::string& name, FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileType>(
    FileType_descriptor(), name, value);
}
enum ResponseType {
  NULL5 = 0,
  OK = 1,
  ERROR = 2,
  LOGGED = 3,
  STAT = 4,
  FILES = 5,
  SHARED = 6,
  SRV_DATA = 7,
  CAN_SEND = 8,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResponseType_IsValid(int value);
const ResponseType ResponseType_MIN = NULL5;
const ResponseType ResponseType_MAX = CAN_SEND;
const int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor();
inline const ::std::string& ResponseType_Name(ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseType_descriptor(), value);
}
inline bool ResponseType_Parse(
    const ::std::string& name, ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
// ===================================================================

class Param : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.Param) */ {
 public:
  Param();
  virtual ~Param();

  Param(const Param& from);

  inline Param& operator=(const Param& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Param(Param&& from) noexcept
    : Param() {
    *this = ::std::move(from);
  }

  inline Param& operator=(Param&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Param& default_instance();

  enum ValueCase {
    kSParamVal = 2,
    kIParamVal = 3,
    kBParamVal = 4,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Param* internal_default_instance() {
    return reinterpret_cast<const Param*>(
               &_Param_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Param* other);
  friend void swap(Param& a, Param& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Param* New() const PROTOBUF_FINAL { return New(NULL); }

  Param* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Param& from);
  void MergeFrom(const Param& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Param* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string paramId = 1;
  void clear_paramid();
  static const int kParamIdFieldNumber = 1;
  const ::std::string& paramid() const;
  void set_paramid(const ::std::string& value);
  #if LANG_CXX11
  void set_paramid(::std::string&& value);
  #endif
  void set_paramid(const char* value);
  void set_paramid(const char* value, size_t size);
  ::std::string* mutable_paramid();
  ::std::string* release_paramid();
  void set_allocated_paramid(::std::string* paramid);

  // string SParamVal = 2;
  private:
  bool has_sparamval() const;
  public:
  void clear_sparamval();
  static const int kSParamValFieldNumber = 2;
  const ::std::string& sparamval() const;
  void set_sparamval(const ::std::string& value);
  #if LANG_CXX11
  void set_sparamval(::std::string&& value);
  #endif
  void set_sparamval(const char* value);
  void set_sparamval(const char* value, size_t size);
  ::std::string* mutable_sparamval();
  ::std::string* release_sparamval();
  void set_allocated_sparamval(::std::string* sparamval);

  // int64 IParamVal = 3;
  private:
  bool has_iparamval() const;
  public:
  void clear_iparamval();
  static const int kIParamValFieldNumber = 3;
  ::google::protobuf::int64 iparamval() const;
  void set_iparamval(::google::protobuf::int64 value);

  // bytes BParamVal = 4;
  private:
  bool has_bparamval() const;
  public:
  void clear_bparamval();
  static const int kBParamValFieldNumber = 4;
  const ::std::string& bparamval() const;
  void set_bparamval(const ::std::string& value);
  #if LANG_CXX11
  void set_bparamval(::std::string&& value);
  #endif
  void set_bparamval(const char* value);
  void set_bparamval(const void* value, size_t size);
  ::std::string* mutable_bparamval();
  ::std::string* release_bparamval();
  void set_allocated_bparamval(::std::string* bparamval);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:StorageCloud.Param)
 private:
  void set_has_sparamval();
  void set_has_iparamval();
  void set_has_bparamval();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr paramid_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr sparamval_;
    ::google::protobuf::int64 iparamval_;
    ::google::protobuf::internal::ArenaStringPtr bparamval_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsParamImpl();
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .StorageCloud.Param params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::StorageCloud::Param& params(int index) const;
  ::StorageCloud::Param* mutable_params(int index);
  ::StorageCloud::Param* add_params();
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
      params() const;

  // repeated string list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::std::string& list(int index) const;
  ::std::string* mutable_list(int index);
  void set_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_list(int index, ::std::string&& value);
  #endif
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  ::std::string* add_list();
  void add_list(const ::std::string& value);
  #if LANG_CXX11
  void add_list(::std::string&& value);
  #endif
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .StorageCloud.CommandType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::StorageCloud::CommandType type() const;
  void set_type(::StorageCloud::CommandType value);

  // @@protoc_insertion_point(class_scope:StorageCloud.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param > params_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsCommandImpl();
};
// -------------------------------------------------------------------

class EncodedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.EncodedMessage) */ {
 public:
  EncodedMessage();
  virtual ~EncodedMessage();

  EncodedMessage(const EncodedMessage& from);

  inline EncodedMessage& operator=(const EncodedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncodedMessage(EncodedMessage&& from) noexcept
    : EncodedMessage() {
    *this = ::std::move(from);
  }

  inline EncodedMessage& operator=(EncodedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncodedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncodedMessage* internal_default_instance() {
    return reinterpret_cast<const EncodedMessage*>(
               &_EncodedMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EncodedMessage* other);
  friend void swap(EncodedMessage& a, EncodedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncodedMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  EncodedMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EncodedMessage& from);
  void MergeFrom(const EncodedMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EncodedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 3;
  void clear_hash();
  static const int kHashFieldNumber = 3;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 dataSize = 1;
  void clear_datasize();
  static const int kDataSizeFieldNumber = 1;
  ::google::protobuf::uint64 datasize() const;
  void set_datasize(::google::protobuf::uint64 value);

  // .StorageCloud.HashAlgorithm hashAlgorithm = 2;
  void clear_hashalgorithm();
  static const int kHashAlgorithmFieldNumber = 2;
  ::StorageCloud::HashAlgorithm hashalgorithm() const;
  void set_hashalgorithm(::StorageCloud::HashAlgorithm value);

  // .StorageCloud.MessageType type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::StorageCloud::MessageType type() const;
  void set_type(::StorageCloud::MessageType value);

  // @@protoc_insertion_point(class_scope:StorageCloud.EncodedMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 datasize_;
  int hashalgorithm_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsEncodedMessageImpl();
};
// -------------------------------------------------------------------

class Handshake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.Handshake) */ {
 public:
  Handshake();
  virtual ~Handshake();

  Handshake(const Handshake& from);

  inline Handshake& operator=(const Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Handshake(Handshake&& from) noexcept
    : Handshake() {
    *this = ::std::move(from);
  }

  inline Handshake& operator=(Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Handshake* internal_default_instance() {
    return reinterpret_cast<const Handshake*>(
               &_Handshake_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Handshake* other);
  friend void swap(Handshake& a, Handshake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Handshake* New() const PROTOBUF_FINAL { return New(NULL); }

  Handshake* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Handshake& from);
  void MergeFrom(const Handshake& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Handshake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .StorageCloud.EncryptionAlgorithm encryptionAlgorithm = 1;
  void clear_encryptionalgorithm();
  static const int kEncryptionAlgorithmFieldNumber = 1;
  ::StorageCloud::EncryptionAlgorithm encryptionalgorithm() const;
  void set_encryptionalgorithm(::StorageCloud::EncryptionAlgorithm value);

  // @@protoc_insertion_point(class_scope:StorageCloud.Handshake)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int encryptionalgorithm_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsHandshakeImpl();
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(File* other);
  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline File* New() const PROTOBUF_FINAL { return New(NULL); }

  File* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .StorageCloud.Param metadata = 7;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 7;
  const ::StorageCloud::Param& metadata(int index) const;
  ::StorageCloud::Param* mutable_metadata(int index);
  ::StorageCloud::Param* add_metadata();
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
      mutable_metadata();
  const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
      metadata() const;

  // string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes hash = 4;
  void clear_hash();
  static const int kHashFieldNumber = 4;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // string owner = 5;
  void clear_owner();
  static const int kOwnerFieldNumber = 5;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // uint64 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // uint64 creationDate = 6;
  void clear_creationdate();
  static const int kCreationDateFieldNumber = 6;
  ::google::protobuf::uint64 creationdate() const;
  void set_creationdate(::google::protobuf::uint64 value);

  // .StorageCloud.FileType filetype = 2;
  void clear_filetype();
  static const int kFiletypeFieldNumber = 2;
  ::StorageCloud::FileType filetype() const;
  void set_filetype(::StorageCloud::FileType value);

  // @@protoc_insertion_point(class_scope:StorageCloud.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param > metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 creationdate_;
  int filetype_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsFileImpl();
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StorageCloud.ServerResponse) */ {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ServerResponse* other);
  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .StorageCloud.Param params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::StorageCloud::Param& params(int index) const;
  ::StorageCloud::Param* mutable_params(int index);
  ::StorageCloud::Param* add_params();
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
      params() const;

  // repeated string list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::std::string& list(int index) const;
  ::std::string* mutable_list(int index);
  void set_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_list(int index, ::std::string&& value);
  #endif
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  ::std::string* add_list();
  void add_list(const ::std::string& value);
  #if LANG_CXX11
  void add_list(::std::string&& value);
  #endif
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // repeated .StorageCloud.File fileList = 4;
  int filelist_size() const;
  void clear_filelist();
  static const int kFileListFieldNumber = 4;
  const ::StorageCloud::File& filelist(int index) const;
  ::StorageCloud::File* mutable_filelist(int index);
  ::StorageCloud::File* add_filelist();
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::File >*
      mutable_filelist();
  const ::google::protobuf::RepeatedPtrField< ::StorageCloud::File >&
      filelist() const;

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .StorageCloud.ResponseType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::StorageCloud::ResponseType type() const;
  void set_type(::StorageCloud::ResponseType value);

  // @@protoc_insertion_point(class_scope:StorageCloud.ServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param > params_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_;
  ::google::protobuf::RepeatedPtrField< ::StorageCloud::File > filelist_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsServerResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Param

// string paramId = 1;
inline void Param::clear_paramid() {
  paramid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Param::paramid() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Param.paramId)
  return paramid_.GetNoArena();
}
inline void Param::set_paramid(const ::std::string& value) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.Param.paramId)
}
#if LANG_CXX11
inline void Param::set_paramid(::std::string&& value) {
  
  paramid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.Param.paramId)
}
#endif
inline void Param::set_paramid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.Param.paramId)
}
inline void Param::set_paramid(const char* value, size_t size) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.Param.paramId)
}
inline ::std::string* Param::mutable_paramid() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.Param.paramId)
  return paramid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Param::release_paramid() {
  // @@protoc_insertion_point(field_release:StorageCloud.Param.paramId)
  
  return paramid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Param::set_allocated_paramid(::std::string* paramid) {
  if (paramid != NULL) {
    
  } else {
    
  }
  paramid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paramid);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.Param.paramId)
}

// string SParamVal = 2;
inline bool Param::has_sparamval() const {
  return value_case() == kSParamVal;
}
inline void Param::set_has_sparamval() {
  _oneof_case_[0] = kSParamVal;
}
inline void Param::clear_sparamval() {
  if (has_sparamval()) {
    value_.sparamval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Param::sparamval() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Param.SParamVal)
  if (has_sparamval()) {
    return value_.sparamval_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Param::set_sparamval(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Param.SParamVal)
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sparamval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.Param.SParamVal)
}
#if LANG_CXX11
inline void Param::set_sparamval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Param.SParamVal)
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sparamval_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.Param.SParamVal)
}
#endif
inline void Param::set_sparamval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sparamval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.Param.SParamVal)
}
inline void Param::set_sparamval(const char* value, size_t size) {
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sparamval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.Param.SParamVal)
}
inline ::std::string* Param::mutable_sparamval() {
  if (!has_sparamval()) {
    clear_value();
    set_has_sparamval();
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:StorageCloud.Param.SParamVal)
  return value_.sparamval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Param::release_sparamval() {
  // @@protoc_insertion_point(field_release:StorageCloud.Param.SParamVal)
  if (has_sparamval()) {
    clear_has_value();
    return value_.sparamval_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Param::set_allocated_sparamval(::std::string* sparamval) {
  if (!has_sparamval()) {
    value_.sparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (sparamval != NULL) {
    set_has_sparamval();
    value_.sparamval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        sparamval);
  }
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.Param.SParamVal)
}

// int64 IParamVal = 3;
inline bool Param::has_iparamval() const {
  return value_case() == kIParamVal;
}
inline void Param::set_has_iparamval() {
  _oneof_case_[0] = kIParamVal;
}
inline void Param::clear_iparamval() {
  if (has_iparamval()) {
    value_.iparamval_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 Param::iparamval() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Param.IParamVal)
  if (has_iparamval()) {
    return value_.iparamval_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Param::set_iparamval(::google::protobuf::int64 value) {
  if (!has_iparamval()) {
    clear_value();
    set_has_iparamval();
  }
  value_.iparamval_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.Param.IParamVal)
}

// bytes BParamVal = 4;
inline bool Param::has_bparamval() const {
  return value_case() == kBParamVal;
}
inline void Param::set_has_bparamval() {
  _oneof_case_[0] = kBParamVal;
}
inline void Param::clear_bparamval() {
  if (has_bparamval()) {
    value_.bparamval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Param::bparamval() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Param.BParamVal)
  if (has_bparamval()) {
    return value_.bparamval_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Param::set_bparamval(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Param.BParamVal)
  if (!has_bparamval()) {
    clear_value();
    set_has_bparamval();
    value_.bparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bparamval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.Param.BParamVal)
}
#if LANG_CXX11
inline void Param::set_bparamval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Param.BParamVal)
  if (!has_bparamval()) {
    clear_value();
    set_has_bparamval();
    value_.bparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bparamval_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.Param.BParamVal)
}
#endif
inline void Param::set_bparamval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_bparamval()) {
    clear_value();
    set_has_bparamval();
    value_.bparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bparamval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.Param.BParamVal)
}
inline void Param::set_bparamval(const void* value, size_t size) {
  if (!has_bparamval()) {
    clear_value();
    set_has_bparamval();
    value_.bparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bparamval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.Param.BParamVal)
}
inline ::std::string* Param::mutable_bparamval() {
  if (!has_bparamval()) {
    clear_value();
    set_has_bparamval();
    value_.bparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:StorageCloud.Param.BParamVal)
  return value_.bparamval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Param::release_bparamval() {
  // @@protoc_insertion_point(field_release:StorageCloud.Param.BParamVal)
  if (has_bparamval()) {
    clear_has_value();
    return value_.bparamval_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Param::set_allocated_bparamval(::std::string* bparamval) {
  if (!has_bparamval()) {
    value_.bparamval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (bparamval != NULL) {
    set_has_bparamval();
    value_.bparamval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bparamval);
  }
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.Param.BParamVal)
}

inline bool Param::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Param::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Param::ValueCase Param::value_case() const {
  return Param::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Command

// .StorageCloud.CommandType type = 1;
inline void Command::clear_type() {
  type_ = 0;
}
inline ::StorageCloud::CommandType Command::type() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Command.type)
  return static_cast< ::StorageCloud::CommandType >(type_);
}
inline void Command::set_type(::StorageCloud::CommandType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.Command.type)
}

// repeated .StorageCloud.Param params = 2;
inline int Command::params_size() const {
  return params_.size();
}
inline void Command::clear_params() {
  params_.Clear();
}
inline const ::StorageCloud::Param& Command::params(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.Command.params)
  return params_.Get(index);
}
inline ::StorageCloud::Param* Command::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.Command.params)
  return params_.Mutable(index);
}
inline ::StorageCloud::Param* Command::add_params() {
  // @@protoc_insertion_point(field_add:StorageCloud.Command.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
Command::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.Command.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
Command::params() const {
  // @@protoc_insertion_point(field_list:StorageCloud.Command.params)
  return params_;
}

// repeated string list = 3;
inline int Command::list_size() const {
  return list_.size();
}
inline void Command::clear_list() {
  list_.Clear();
}
inline const ::std::string& Command::list(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.Command.list)
  return list_.Get(index);
}
inline ::std::string* Command::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.Command.list)
  return list_.Mutable(index);
}
inline void Command::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Command.list)
  list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Command::set_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.Command.list)
  list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Command::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageCloud.Command.list)
}
inline void Command::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.Command.list)
}
inline ::std::string* Command::add_list() {
  // @@protoc_insertion_point(field_add_mutable:StorageCloud.Command.list)
  return list_.Add();
}
inline void Command::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageCloud.Command.list)
}
#if LANG_CXX11
inline void Command::add_list(::std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageCloud.Command.list)
}
#endif
inline void Command::add_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageCloud.Command.list)
}
inline void Command::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageCloud.Command.list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Command::list() const {
  // @@protoc_insertion_point(field_list:StorageCloud.Command.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.Command.list)
  return &list_;
}

// bytes data = 4;
inline void Command::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::data() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Command.data)
  return data_.GetNoArena();
}
inline void Command::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.Command.data)
}
#if LANG_CXX11
inline void Command::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.Command.data)
}
#endif
inline void Command::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.Command.data)
}
inline void Command::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.Command.data)
}
inline ::std::string* Command::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.Command.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_data() {
  // @@protoc_insertion_point(field_release:StorageCloud.Command.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.Command.data)
}

// -------------------------------------------------------------------

// EncodedMessage

// uint64 dataSize = 1;
inline void EncodedMessage::clear_datasize() {
  datasize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EncodedMessage::datasize() const {
  // @@protoc_insertion_point(field_get:StorageCloud.EncodedMessage.dataSize)
  return datasize_;
}
inline void EncodedMessage::set_datasize(::google::protobuf::uint64 value) {
  
  datasize_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.EncodedMessage.dataSize)
}

// .StorageCloud.HashAlgorithm hashAlgorithm = 2;
inline void EncodedMessage::clear_hashalgorithm() {
  hashalgorithm_ = 0;
}
inline ::StorageCloud::HashAlgorithm EncodedMessage::hashalgorithm() const {
  // @@protoc_insertion_point(field_get:StorageCloud.EncodedMessage.hashAlgorithm)
  return static_cast< ::StorageCloud::HashAlgorithm >(hashalgorithm_);
}
inline void EncodedMessage::set_hashalgorithm(::StorageCloud::HashAlgorithm value) {
  
  hashalgorithm_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.EncodedMessage.hashAlgorithm)
}

// bytes hash = 3;
inline void EncodedMessage::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncodedMessage::hash() const {
  // @@protoc_insertion_point(field_get:StorageCloud.EncodedMessage.hash)
  return hash_.GetNoArena();
}
inline void EncodedMessage::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.EncodedMessage.hash)
}
#if LANG_CXX11
inline void EncodedMessage::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.EncodedMessage.hash)
}
#endif
inline void EncodedMessage::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.EncodedMessage.hash)
}
inline void EncodedMessage::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.EncodedMessage.hash)
}
inline ::std::string* EncodedMessage::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.EncodedMessage.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncodedMessage::release_hash() {
  // @@protoc_insertion_point(field_release:StorageCloud.EncodedMessage.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncodedMessage::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.EncodedMessage.hash)
}

// .StorageCloud.MessageType type = 4;
inline void EncodedMessage::clear_type() {
  type_ = 0;
}
inline ::StorageCloud::MessageType EncodedMessage::type() const {
  // @@protoc_insertion_point(field_get:StorageCloud.EncodedMessage.type)
  return static_cast< ::StorageCloud::MessageType >(type_);
}
inline void EncodedMessage::set_type(::StorageCloud::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.EncodedMessage.type)
}

// bytes data = 5;
inline void EncodedMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncodedMessage::data() const {
  // @@protoc_insertion_point(field_get:StorageCloud.EncodedMessage.data)
  return data_.GetNoArena();
}
inline void EncodedMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.EncodedMessage.data)
}
#if LANG_CXX11
inline void EncodedMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.EncodedMessage.data)
}
#endif
inline void EncodedMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.EncodedMessage.data)
}
inline void EncodedMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.EncodedMessage.data)
}
inline ::std::string* EncodedMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.EncodedMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncodedMessage::release_data() {
  // @@protoc_insertion_point(field_release:StorageCloud.EncodedMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncodedMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.EncodedMessage.data)
}

// -------------------------------------------------------------------

// Handshake

// .StorageCloud.EncryptionAlgorithm encryptionAlgorithm = 1;
inline void Handshake::clear_encryptionalgorithm() {
  encryptionalgorithm_ = 0;
}
inline ::StorageCloud::EncryptionAlgorithm Handshake::encryptionalgorithm() const {
  // @@protoc_insertion_point(field_get:StorageCloud.Handshake.encryptionAlgorithm)
  return static_cast< ::StorageCloud::EncryptionAlgorithm >(encryptionalgorithm_);
}
inline void Handshake::set_encryptionalgorithm(::StorageCloud::EncryptionAlgorithm value) {
  
  encryptionalgorithm_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.Handshake.encryptionAlgorithm)
}

// -------------------------------------------------------------------

// File

// string filename = 1;
inline void File::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::filename() const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.filename)
  return filename_.GetNoArena();
}
inline void File::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.File.filename)
}
#if LANG_CXX11
inline void File::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.File.filename)
}
#endif
inline void File::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.File.filename)
}
inline void File::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.File.filename)
}
inline ::std::string* File::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.File.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_filename() {
  // @@protoc_insertion_point(field_release:StorageCloud.File.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.File.filename)
}

// .StorageCloud.FileType filetype = 2;
inline void File::clear_filetype() {
  filetype_ = 0;
}
inline ::StorageCloud::FileType File::filetype() const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.filetype)
  return static_cast< ::StorageCloud::FileType >(filetype_);
}
inline void File::set_filetype(::StorageCloud::FileType value) {
  
  filetype_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.File.filetype)
}

// uint64 size = 3;
inline void File::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 File::size() const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.size)
  return size_;
}
inline void File::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.File.size)
}

// bytes hash = 4;
inline void File::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::hash() const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.hash)
  return hash_.GetNoArena();
}
inline void File::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.File.hash)
}
#if LANG_CXX11
inline void File::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.File.hash)
}
#endif
inline void File::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.File.hash)
}
inline void File::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.File.hash)
}
inline ::std::string* File::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.File.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_hash() {
  // @@protoc_insertion_point(field_release:StorageCloud.File.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.File.hash)
}

// string owner = 5;
inline void File::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::owner() const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.owner)
  return owner_.GetNoArena();
}
inline void File::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.File.owner)
}
#if LANG_CXX11
inline void File::set_owner(::std::string&& value) {
  
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.File.owner)
}
#endif
inline void File::set_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.File.owner)
}
inline void File::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.File.owner)
}
inline ::std::string* File::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.File.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_owner() {
  // @@protoc_insertion_point(field_release:StorageCloud.File.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.File.owner)
}

// uint64 creationDate = 6;
inline void File::clear_creationdate() {
  creationdate_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 File::creationdate() const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.creationDate)
  return creationdate_;
}
inline void File::set_creationdate(::google::protobuf::uint64 value) {
  
  creationdate_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.File.creationDate)
}

// repeated .StorageCloud.Param metadata = 7;
inline int File::metadata_size() const {
  return metadata_.size();
}
inline void File::clear_metadata() {
  metadata_.Clear();
}
inline const ::StorageCloud::Param& File::metadata(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.File.metadata)
  return metadata_.Get(index);
}
inline ::StorageCloud::Param* File::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.File.metadata)
  return metadata_.Mutable(index);
}
inline ::StorageCloud::Param* File::add_metadata() {
  // @@protoc_insertion_point(field_add:StorageCloud.File.metadata)
  return metadata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
File::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.File.metadata)
  return &metadata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
File::metadata() const {
  // @@protoc_insertion_point(field_list:StorageCloud.File.metadata)
  return metadata_;
}

// -------------------------------------------------------------------

// ServerResponse

// .StorageCloud.ResponseType type = 1;
inline void ServerResponse::clear_type() {
  type_ = 0;
}
inline ::StorageCloud::ResponseType ServerResponse::type() const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.type)
  return static_cast< ::StorageCloud::ResponseType >(type_);
}
inline void ServerResponse::set_type(::StorageCloud::ResponseType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StorageCloud.ServerResponse.type)
}

// repeated .StorageCloud.Param params = 2;
inline int ServerResponse::params_size() const {
  return params_.size();
}
inline void ServerResponse::clear_params() {
  params_.Clear();
}
inline const ::StorageCloud::Param& ServerResponse::params(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.params)
  return params_.Get(index);
}
inline ::StorageCloud::Param* ServerResponse::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.ServerResponse.params)
  return params_.Mutable(index);
}
inline ::StorageCloud::Param* ServerResponse::add_params() {
  // @@protoc_insertion_point(field_add:StorageCloud.ServerResponse.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >*
ServerResponse::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.ServerResponse.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::StorageCloud::Param >&
ServerResponse::params() const {
  // @@protoc_insertion_point(field_list:StorageCloud.ServerResponse.params)
  return params_;
}

// repeated string list = 3;
inline int ServerResponse::list_size() const {
  return list_.size();
}
inline void ServerResponse::clear_list() {
  list_.Clear();
}
inline const ::std::string& ServerResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.list)
  return list_.Get(index);
}
inline ::std::string* ServerResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.ServerResponse.list)
  return list_.Mutable(index);
}
inline void ServerResponse::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.ServerResponse.list)
  list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerResponse::set_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StorageCloud.ServerResponse.list)
  list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerResponse::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageCloud.ServerResponse.list)
}
inline void ServerResponse::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.ServerResponse.list)
}
inline ::std::string* ServerResponse::add_list() {
  // @@protoc_insertion_point(field_add_mutable:StorageCloud.ServerResponse.list)
  return list_.Add();
}
inline void ServerResponse::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageCloud.ServerResponse.list)
}
#if LANG_CXX11
inline void ServerResponse::add_list(::std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageCloud.ServerResponse.list)
}
#endif
inline void ServerResponse::add_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageCloud.ServerResponse.list)
}
inline void ServerResponse::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageCloud.ServerResponse.list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerResponse::list() const {
  // @@protoc_insertion_point(field_list:StorageCloud.ServerResponse.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.ServerResponse.list)
  return &list_;
}

// repeated .StorageCloud.File fileList = 4;
inline int ServerResponse::filelist_size() const {
  return filelist_.size();
}
inline void ServerResponse::clear_filelist() {
  filelist_.Clear();
}
inline const ::StorageCloud::File& ServerResponse::filelist(int index) const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.fileList)
  return filelist_.Get(index);
}
inline ::StorageCloud::File* ServerResponse::mutable_filelist(int index) {
  // @@protoc_insertion_point(field_mutable:StorageCloud.ServerResponse.fileList)
  return filelist_.Mutable(index);
}
inline ::StorageCloud::File* ServerResponse::add_filelist() {
  // @@protoc_insertion_point(field_add:StorageCloud.ServerResponse.fileList)
  return filelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::StorageCloud::File >*
ServerResponse::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_list:StorageCloud.ServerResponse.fileList)
  return &filelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::StorageCloud::File >&
ServerResponse::filelist() const {
  // @@protoc_insertion_point(field_list:StorageCloud.ServerResponse.fileList)
  return filelist_;
}

// bytes data = 5;
inline void ServerResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerResponse::data() const {
  // @@protoc_insertion_point(field_get:StorageCloud.ServerResponse.data)
  return data_.GetNoArena();
}
inline void ServerResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StorageCloud.ServerResponse.data)
}
#if LANG_CXX11
inline void ServerResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StorageCloud.ServerResponse.data)
}
#endif
inline void ServerResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StorageCloud.ServerResponse.data)
}
inline void ServerResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StorageCloud.ServerResponse.data)
}
inline ::std::string* ServerResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:StorageCloud.ServerResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerResponse::release_data() {
  // @@protoc_insertion_point(field_release:StorageCloud.ServerResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:StorageCloud.ServerResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StorageCloud

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::StorageCloud::CommandType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageCloud::CommandType>() {
  return ::StorageCloud::CommandType_descriptor();
}
template <> struct is_proto_enum< ::StorageCloud::HashAlgorithm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageCloud::HashAlgorithm>() {
  return ::StorageCloud::HashAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::StorageCloud::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageCloud::MessageType>() {
  return ::StorageCloud::MessageType_descriptor();
}
template <> struct is_proto_enum< ::StorageCloud::EncryptionAlgorithm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageCloud::EncryptionAlgorithm>() {
  return ::StorageCloud::EncryptionAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::StorageCloud::FileType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageCloud::FileType>() {
  return ::StorageCloud::FileType_descriptor();
}
template <> struct is_proto_enum< ::StorageCloud::ResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageCloud::ResponseType>() {
  return ::StorageCloud::ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
